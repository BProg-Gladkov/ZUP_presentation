
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Инициализировать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбновитьТекстЗапросаПриИзмененииНастроеек(Элемент)
	
	ОбновитьТекстЗапроса();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКадровыеДанныеСотрудников

&НаКлиенте
Процедура КадровыеДанныеСотрудников_УстановитьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.КадровыеДанныеСотрудников_ТаблицаПолей, КадровыеДанныеСотрудников_ТаблицаПолей, Истина);
 	ОбновитьТекстЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура КадровыеДанныеСотрудников_СнятьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.КадровыеДанныеСотрудников_ТаблицаПолей, КадровыеДанныеСотрудников_ТаблицаПолей, Ложь);
 	ОбновитьТекстЗапроса();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКадровыеДанныеСотрудников

&НаКлиенте
Процедура ДанныеУчетаВремениИСостоянийСотрудников_УстановитьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей, ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей, Истина);
 	ОбновитьТекстЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеУчетаВремениИСостоянийСотрудников_СнятьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей, ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей, Ложь);
 	ОбновитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКадровыеДанныеСотрудников

&НаКлиенте
Процедура ШтатноеРасписание_УстановитьФлажки(Команда)

	ИзменитьФлажки(Элементы.ШтатноеРасписание_ТаблицаПолей, ШтатноеРасписание_ТаблицаПолей, Истина);
 	ОбновитьТекстЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ШтатноеРасписание_СнятьФлажки(Команда)

	ИзменитьФлажки(Элементы.ШтатноеРасписание_ТаблицаПолей, ШтатноеРасписание_ТаблицаПолей, Ложь);
 	ОбновитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрочитатьЗапрос(Команда)
	
	ПрочитатьТекстЗапросаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	Конструктор = Новый("КонструкторЗапроса");
	Конструктор.Текст = ТекстЗапроса;
	Конструктор.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФактическогоЗапроса(Команда)

	Конструктор = Новый("КонструкторЗапроса");
	Конструктор.Текст = ТекстФактическогоЗапроса;
	Конструктор.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстФактическогоЗапроса(Команда)
	
	ОбновитьТекстФактическогоЗапросаНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Периоды

&НаСервере
Процедура Периоды_Инициаизировать()
	
	Периоды_ИспользоватьКонецПериода = Ложь;
	Периоды_НачалоИнтервала = "ДатаНачала";
	Периоды_ОкончаниеИнтервала = "ДатаОкончания";
	Периоды_Периодичность = "ДЕНЬ";
	Периоды_ДобавитьВыборкуСотрудников = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция Периоды_ТекстЗапроса()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
	|ПОМЕСТИТЬ Представления_Периоды
	|ГДЕ
	|	""НачалоИнтервала"" = &[НачалоИнтервала]
	|	И ""ОкончаниеИнтервала"" = &[ОкончаниеИнтервала]
	|	И ""Периодичность"" = ""[Периодичность]""
	|	И ""ИспользоватьКонецПериода"" = ""[ИспользоватьКонецПериода]""";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НачалоИнтервала", Периоды_НачалоИнтервала);
	ПараметрыЗапроса.Вставить("ОкончаниеИнтервала", Периоды_ОкончаниеИнтервала);
	ПараметрыЗапроса.Вставить("Периодичность", Периоды_Периодичность);
	ПараметрыЗапроса.Вставить("ИспользоватьКонецПериода", БулевоСтрокой(Периоды_ИспользоватьКонецПериода));
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыЗапроса);
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаКлиенте
Функция Периоды_ТекстЗапросаВыборкиСотрудников()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	КОНЕЦПЕРИОДА(Представления_Периоды.Период, ДЕНЬ) КАК Период
	|ПОМЕСТИТЬ [ТаблицаДляПомещения]
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Представления_Периоды КАК Представления_Периоды
	|		ПО (ИСТИНА)
	|{ГДЕ
	|	Сотрудники.Ссылка.* КАК Сотрудник}";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТаблицаДляПомещения", КадровыеДанныеСотрудников_ИмяТаблицы);
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыЗапроса);
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаСервере
Процедура Периоды_ПрочитатьТекстЗапроса(Запрос)
	
	ОператорВыбрать = Запрос.Операторы[0];
	Для каждого Отбор Из ОператорВыбрать.Отбор Цикл
		СтрокаОтбор = Строка(Отбор);
		Если СтрНайти(СтрокаОтбор, "НачалоИнтервала") Тогда
			Периоды_НачалоИнтервала = СтрЗаменить(СтрокаОтбор, """НачалоИнтервала"" = &", "");
			
		ИначеЕсли СтрНайти(СтрокаОтбор, "ОкончаниеИнтервала") Тогда
			Периоды_ОкончаниеИнтервала = СтрЗаменить(СтрокаОтбор, """ОкончаниеИнтервала"" = &", "");	
			
		ИначеЕсли СтрНайти(СтрокаОтбор, "Периодичность") Тогда
			ЗначениеСтрокой = СтрЗаменить(СтрокаОтбор, """Периодичность"" = ", "");
			Периоды_Периодичность = СтрЗаменить(ЗначениеСтрокой, """", "");
			
		ИначеЕсли СтрНайти(СтрокаОтбор, "ИспользоватьКонецПериода") Тогда
			ЗначениеСтрокой = СтрЗаменить(СтрокаОтбор, """ИспользоватьКонецПериода"" = ", "");
			Периоды_ИспользоватьКонецПериода = СтрЗаменить(ЗначениеСтрокой, """", "");
			
		КонецЕсли;
		
		Если Строка(Отбор) = """ФормироватьСПериодичностьДень"" = ЛОЖЬ" Тогда
			КадровыеДанныеСотрудников_ФормироватьСПериодичностьДень = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область КадровыеДанныеСотрудников

&НаСервере
Процедура КадровыеДанныеСотрудников_Инициаизировать()
	
	ПоляПредставленийКадровыхДанных = КадровыйУчет.ПоляПредставленийКадровыхДанныхСотрудников();
	КадровыеДанныеСотрудников_ТаблицаПолей.Загрузить(ПоляПредставленийКадровыхДанных);
	Для каждого Строка Из КадровыеДанныеСотрудников_ТаблицаПолей Цикл
		Строка.ВРегИмяПоля = ВРег(Строка.ИмяПоля);
	КонецЦикла; 
	
	КадровыеДанныеСотрудников_ТолькоРазрешенные = Ложь;
	КадровыеДанныеСотрудников_ФормироватьСПериодичностьДень = Истина;
	КадровыеДанныеСотрудников_ИмяТаблицы = "ВТСотрудники";
	КадровыеДанныеСотрудников_ПсевдонимТаблицы = "Сотрудники";
	КадровыеДанныеСотрудников_ТаблицаДляПомещения = "Представления_КадровыеДанныеСотрудников";
	
КонецПроцедуры

&НаКлиенте
Функция КадровыеДанныеСотрудников_ТекстЗапроса()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|[СтрокаРеквизитов]
	|ПОМЕСТИТЬ [ТаблицаДляПомещения]
	|ИЗ
	|	[ИмяТаблицы] КАК [ПсевдонимТаблицы]
	|ГДЕ
	|	[СтрокаПараметров]";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяТаблицы", КадровыеДанныеСотрудников_ИмяТаблицы);
	ПараметрыЗапроса.Вставить("ПсевдонимТаблицы", КадровыеДанныеСотрудников_ПсевдонимТаблицы);
	ПараметрыЗапроса.Вставить("ТаблицаДляПомещения", КадровыеДанныеСотрудников_ТаблицаДляПомещения);
	ПараметрыЗапроса.Вставить("СтрокаРеквизитов", СтрокаРеквизитов(КадровыеДанныеСотрудников_ТаблицаПолей));
	ПараметрыЗапроса.Вставить("СтрокаПараметров", КадровыеДанныеСотрудников_СтрокаПараметров());
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыЗапроса);
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаКлиенте
Функция КадровыеДанныеСотрудников_СтрокаПараметров()

	ЗначенияПараметров = Новый Структура;
	
	ТолькоРазрешенные = БулевоСтрокой(КадровыеДанныеСотрудников_ТолькоРазрешенные);
	ЗначенияПараметров.Вставить("ТолькоРазрешенные", ТолькоРазрешенные);
	
	Если НЕ КадровыеДанныеСотрудников_ФормироватьСПериодичностьДень Тогда
		ЗначенияПараметров.Вставить("ФормироватьСПериодичностьДень", "ЛОЖЬ");
	КонецЕсли;
	
	СтрокаПараметров = СтрокаПараметров(ЗначенияПараметров);
	Возврат СтрокаПараметров;
	
КонецФункции

&НаСервере
Процедура КадровыеДанныеСотрудников_ПрочитатьТекстЗапроса(Запрос)

	ОператорВыбрать = Запрос.Операторы[0];
	ИсточникСхемыЗапроса = ОператорВыбрать.Источники[0];
	
	КадровыеДанныеСотрудников_ТаблицаДляПомещения = Запрос.ТаблицаДляПомещения;
	КадровыеДанныеСотрудников_ИмяТаблицы = ИсточникСхемыЗапроса.Источник.ИмяТаблицы;
	КадровыеДанныеСотрудников_ПсевдонимТаблицы = ИсточникСхемыЗапроса.Источник.Псевдоним;
	
	Для каждого Отбор Из ОператорВыбрать.Отбор Цикл
		СтрокаОтбор = Строка(Отбор);
		
		Если СтрокаОтбор = """ТолькоРазрешенные"" = ИСТИНА" Тогда
			КадровыеДанныеСотрудников_ТолькоРазрешенные = Истина;
			
		ИначеЕсли СтрокаОтбор = """ФормироватьСПериодичностьДень"" = ЛОЖЬ" Тогда
			КадровыеДанныеСотрудников_ФормироватьСПериодичностьДень = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого Колонка Из Запрос.Колонки Цикл
		Отбор = Новый Структура("ВРегИмяПоля", ВРег(Колонка.Псевдоним));
		Строки = КадровыеДанныеСотрудников_ТаблицаПолей.НайтиСтроки(Отбор);
		Для каждого Строка Из Строки Цикл
			Строка.Пометка = Истина;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеУчетаВремениИСостоянийСотрудников

&НаСервере
Процедура ДанныеУчетаВремениИСостоянийСотрудников_Инициаизировать()
	
	Обновить_ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей();
	
	ДанныеУчетаВремениИСостоянийСотрудников_ТолькоРазрешенные = Ложь;
	ДанныеУчетаВремениИСостоянийСотрудников_МесяцДатаОкончания = "МесяцДатаОкончания";
	ДанныеУчетаВремениИСостоянийСотрудников_МесяцДатаНачала = "МесяцДатаНачала";
	ДанныеУчетаВремениИСостоянийСотрудников_ДатаОкончания = "ДатаОкончания";
	ДанныеУчетаВремениИСостоянийСотрудников_ДатаНачала = "ДатаНачала";
	ДанныеУчетаВремениИСостоянийСотрудников_ДатаАктуальности = "ДатаАктуальности";
	ДанныеУчетаВремениИСостоянийСотрудников_РассчитыватьПлановоеВремя = "РассчитыватьПлановоеВремя";
	
КонецПроцедуры

&НаСервере
Процедура Обновить_ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОписаниеПолей = ОбработкаОбъект.ОписаниеПолейПредставления_ДанныеУчетаВремениИСостоянийСотрудников();
	ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей.Загрузить(ОписаниеПолей);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеУчетаВремениИСостоянийСотрудников_ТекстЗапроса()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&[ДатаНачала] КАК ДатаНачала,
	|	&[ДатаОкончания] КАК ДатаОкончания,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|{ГДЕ
	|	Сотрудники.Ссылка.* КАК Сотрудник}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|[СтрокаРеквизитов]
	|ПОМЕСТИТЬ Представления_ДанныеУчетаВремениИСостоянийСотрудников
	|ИЗ
	|	ВТСотрудники КАК ВТСотрудники
	|ГДЕ
	|	""ТолькоРазрешенные"" = [ТолькоРазрешенные]
	|	И ""ДатаНачала"" = &[ДатаНачала]
	|	И ""ДатаОкончания"" = &[ДатаОкончания]
	|	И ""МесяцДатаНачала"" = &[МесяцДатаНачала]
	|	И ""МесяцДатаОкончания"" = &[МесяцДатаОкончания]
	|	И ""ДатаАктуальности"" = &[ДатаАктуальности]
	|	И ""РассчитыватьПлановоеВремя"" = &[РассчитыватьПлановоеВремя]";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТолькоРазрешенные", БулевоСтрокой(ДанныеУчетаВремениИСостоянийСотрудников_ТолькоРазрешенные));
	ПараметрыЗапроса.Вставить("ДатаНачала", ДанныеУчетаВремениИСостоянийСотрудников_ДатаНачала);
	ПараметрыЗапроса.Вставить("ДатаОкончания", ДанныеУчетаВремениИСостоянийСотрудников_ДатаОкончания);
	ПараметрыЗапроса.Вставить("МесяцДатаНачала", ДанныеУчетаВремениИСостоянийСотрудников_МесяцДатаНачала);
	ПараметрыЗапроса.Вставить("МесяцДатаОкончания", ДанныеУчетаВремениИСостоянийСотрудников_МесяцДатаОкончания);
	ПараметрыЗапроса.Вставить("ДатаАктуальности", ДанныеУчетаВремениИСостоянийСотрудников_ДатаАктуальности);
	ПараметрыЗапроса.Вставить("РассчитыватьПлановоеВремя", ДанныеУчетаВремениИСостоянийСотрудников_РассчитыватьПлановоеВремя);
	ПараметрыЗапроса.Вставить("СтрокаРеквизитов", СтрокаРеквизитов(ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей));
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыЗапроса);
	Возврат ТекстПодзапроса;
	
КонецФункции

#КонецОбласти

#Область ШтатноеРасписание

&НаСервере
Процедура ШтатноеРасписание_Инициаизировать()
	
	Обновить_ШтатноеРасписание_ТаблицаПолей();
	
	ШтатноеРасписание_ТолькоРазрешенные = Ложь;
	ШтатноеРасписание_ВключатьНачисления = Ложь;
	ШтатноеРасписание_ДатаАктуальности = "ДатаАктуальности";
	
КонецПроцедуры

&НаКлиенте
Процедура ШтатноеРасписание_ВключатьНачисленияПриИзменении(Элемент)
	
	Обновить_ШтатноеРасписание_ТаблицаПолей();
	ОбновитьТекстЗапроса();
	
КонецПроцедуры

&НаСервере
Процедура Обновить_ШтатноеРасписание_ТаблицаПолей()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОписаниеПолей = ОбработкаОбъект.ОписаниеПолейПредставления_ШтатноеРасписание(ШтатноеРасписание_ВключатьНачисления);
	ШтатноеРасписание_ТаблицаПолей.Загрузить(ОписаниеПолей);
	
КонецПроцедуры

&НаКлиенте
Функция ШтатноеРасписание_ТекстЗапроса()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ 
	|[СтрокаРеквизитов] 
	|ПОМЕСТИТЬ Представления_ШтатноеРасписание
	|ГДЕ
	|	""ТолькоРазрешенные"" = [ТолькоРазрешенные]
	|	И ""ДатаАктуальности"" = &[ДатаАктуальности]
	|	И ""ВключатьНачисления"" = [ВключатьНачисления]";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТолькоРазрешенные", БулевоСтрокой(ШтатноеРасписание_ТолькоРазрешенные));
	ПараметрыЗапроса.Вставить("ДатаАктуальности", БулевоСтрокой(ШтатноеРасписание_ДатаАктуальности));
	ПараметрыЗапроса.Вставить("ВключатьНачисления", БулевоСтрокой(ШтатноеРасписание_ВключатьНачисления));
	ПараметрыЗапроса.Вставить("СтрокаРеквизитов", СтрокаРеквизитов(ШтатноеРасписание_ТаблицаПолей));
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыЗапроса);
	Возврат ТекстПодзапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура Инициализировать()
	
	Периоды_Использовать = Ложь;
	КадровыеДанныеСотрудников_Использовать = Ложь;
	ШтатноеРасписание_Использовать = Ложь;
	ДанныеУчетаВремениИСостоянийСотрудников_Использовать = Ложь;
	
	Периоды_Инициаизировать();
	КадровыеДанныеСотрудников_Инициаизировать();
	ДанныеУчетаВремениИСостоянийСотрудников_Инициаизировать();
	ШтатноеРасписание_Инициаизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлажки(ЭлементФормыТаблица, Таблица, Значение)
	
	ИдентификаторыСтрок = ЭлементФормыТаблица.ВыделенныеСтроки;
	Если ИдентификаторыСтрок.Количество() > 1 Тогда
		Строки = Новый Массив;
		Для каждого Идентификатор Из ИдентификаторыСтрок Цикл
			Строка = Таблица.НайтиПоИдентификатору(Идентификатор);
			Строки.Добавить(Строка);
		КонецЦикла;
	Иначе
		Строки = Таблица;
	КонецЕсли;
	
	Для каждого Строка Из Строки Цикл
		Строка.Пометка = Значение;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстЗапроса()
	
	ТекстыЗапросов = Новый Массив;
	
	Если Периоды_Использовать Тогда
		ТекстПодзапроса = Периоды_ТекстЗапроса();
		ТекстыЗапросов.Добавить(ТекстПодзапроса);
		
		Если Периоды_ДобавитьВыборкуСотрудников Тогда
			ТекстПодзапроса = Периоды_ТекстЗапросаВыборкиСотрудников();
			ТекстыЗапросов.Добавить(ТекстПодзапроса);
		КонецЕсли;	
	КонецЕсли;
	
	Если КадровыеДанныеСотрудников_Использовать Тогда
		ТекстПодзапроса = КадровыеДанныеСотрудников_ТекстЗапроса();
		ТекстыЗапросов.Добавить(ТекстПодзапроса);
	КонецЕсли;
	
	Если ДанныеУчетаВремениИСостоянийСотрудников_Использовать Тогда
		ТекстПодзапроса = ДанныеУчетаВремениИСостоянийСотрудников_ТекстЗапроса();
		ТекстыЗапросов.Добавить(ТекстПодзапроса);
	КонецЕсли;
	
	Если ШтатноеРасписание_Использовать Тогда
		ТекстПодзапроса = ШтатноеРасписание_ТекстЗапроса();
		ТекстыЗапросов.Добавить(ТекстПодзапроса);
	КонецЕсли;
	
	РазделительЗапросов =
	"
	|;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, РазделительЗапросов);
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаРеквизитов(ТаблицаОписанияПолей)
	
	МассивСтрок = Новый Массив;
	
	ШаблонСтроки = "	%1 КАК %2";
	
	Отбор = Новый Структура("Пометка", Истина);
	Для каждого Строка Из ТаблицаОписанияПолей.НайтиСтроки(Отбор) Цикл
		СтрокаЗапроса = СтрШаблон(ШаблонСтроки, Строка.ПустоеЗначениеНаЯзыкеЗапросов, Строка.ИмяПоля);
		МассивСтрок.Добавить(СтрокаЗапроса);
	КонецЦикла;
	
	Разделитель = "," + Символы.ПС;
	Результат = СтрСоединить(МассивСтрок, Разделитель);
	
	Возврат Результат;
	
КонецФункции	
	
&НаКлиенте
Функция СтрокаПараметров(ЗначенияПараметров)
	
	МассивСтрок = Новый Массив;
	ШаблонСтроки = """%1"" = %2";
	
	Для каждого Элемент Из ЗначенияПараметров Цикл
		Строка = СтрШаблон(ШаблонСтроки, Элемент.Ключ, Элемент.Значение);	
		МассивСтрок.Добавить(Строка);
	КонецЦикла; 
	
	Разделитель = Символы.ПС + "	И ";
	Результат = СтрСоединить(МассивСтрок, Разделитель);
	
	Возврат Результат;
	
КонецФункции
	
&НаСервере
Процедура ПрочитатьТекстЗапросаНаСервере()

	Инициализировать();
	
	СхемаЗапроса = Новый СхемаЗапроса;	
    СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Для каждого Запрос Из СхемаЗапроса.ПакетЗапросов Цикл
		Если Тип(Запрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") 
			ИЛИ Запрос.Операторы.Количество() <> 1
		Тогда
			Продолжить;
		КонецЕсли;	
		
		ОператорВыбрать = Запрос.Операторы[0];
		КоличествоИсточников = ОператорВыбрать.Источники.Количество();
			
		Если СтрНачинаетсяС(Запрос.ТаблицаДляПомещения, "Представления_КадровыеДанныеСотрудников") И КоличествоИсточников = 1 Тогда
			КадровыеДанныеСотрудников_Использовать = Истина;
			КадровыеДанныеСотрудников_ПрочитатьТекстЗапроса(Запрос);
			
		ИначеЕсли Запрос.ТаблицаДляПомещения = "Представления_Периоды" И КоличествоИсточников = 0 Тогда
			Периоды_Использовать = Истина;
			Периоды_ПрочитатьТекстЗапроса(Запрос);
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого Запрос Из СхемаЗапроса.ПакетЗапросов Цикл
		Если Запрос.ТаблицаДляПомещения = КадровыеДанныеСотрудников_ИмяТаблицы Тогда
			Периоды_ДобавитьВыборкуСотрудников = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция БулевоСтрокой(Значение)
	
	Возврат Формат(Значение, "БЛ=ЛОЖЬ; БИ=ИСТИНА");

КонецФункции

&НаСервере
Процедура ОбновитьТекстФактическогоЗапросаНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекстФактическогоЗапроса = ОбработкаОбъект.ТекстФактическогоЗапроса(ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

