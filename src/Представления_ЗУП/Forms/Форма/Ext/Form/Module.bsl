
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Инициализировать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбновитьТекстЗапросаПриИзмененииНастроеек(Элемент)
	
	ОбновитьТексты();
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПолейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.ТекущиеДанные.Пометка = НЕ Элемент.ТекущиеДанные.Пометка;
	ОбновитьТексты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКадровыеДанныеСотрудников

&НаКлиенте
Процедура ПредставленияИспользоватьПриИзменении(Элемент)
	
	НастроитьЭлементыФормы(ЭтаФорма);
	ОбновитьТексты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКадровыеДанныеСотрудников

&НаКлиенте
Процедура КадровыеДанныеСотрудников_УстановитьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.КадровыеДанныеСотрудников_ТаблицаПолей, КадровыеДанныеСотрудников_ТаблицаПолей, Истина);
 	ОбновитьТексты();
	
КонецПроцедуры

&НаКлиенте
Процедура КадровыеДанныеСотрудников_СнятьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.КадровыеДанныеСотрудников_ТаблицаПолей, КадровыеДанныеСотрудников_ТаблицаПолей, Ложь);
 	ОбновитьТексты();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКадровыеДанныеФизическихЛиц

&НаКлиенте
Процедура КадровыеДанныеФизическихЛиц_УстановитьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.КадровыеДанныеФизическихЛиц_ТаблицаПолей, КадровыеДанныеФизическихЛиц_ТаблицаПолей, Истина);
 	ОбновитьТексты();
	
КонецПроцедуры

&НаКлиенте
Процедура КадровыеДанныеФизическихЛиц_СнятьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.КадровыеДанныеФизическихЛиц_ТаблицаПолей, КадровыеДанныеФизическихЛиц_ТаблицаПолей, Ложь);
 	ОбновитьТексты();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеУчетаВремениИСостоянийСотрудников

&НаКлиенте
Процедура ДанныеУчетаВремениИСостоянийСотрудников_УстановитьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей, ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей, Истина);
 	ОбновитьТексты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеУчетаВремениИСостоянийСотрудников_СнятьФлажки(Команда)
	
	ИзменитьФлажки(Элементы.ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей, ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей, Ложь);
 	ОбновитьТексты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШтатноеРасписание

&НаКлиенте
Процедура ШтатноеРасписание_УстановитьФлажки(Команда)

	ИзменитьФлажки(Элементы.ШтатноеРасписание_ТаблицаПолей, ШтатноеРасписание_ТаблицаПолей, Истина);
 	ОбновитьТексты();
	
КонецПроцедуры

&НаКлиенте
Процедура ШтатноеРасписание_СнятьФлажки(Команда)

	ИзменитьФлажки(Элементы.ШтатноеРасписание_ТаблицаПолей, ШтатноеРасписание_ТаблицаПолей, Ложь);
 	ОбновитьТексты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСрезПоследних

&НаКлиенте
Процедура СрезПоследних_УстановитьФлажки(Команда)

	ИзменитьФлажки(Элементы.СрезПоследних_ТаблицаПолей, СрезПоследних_ТаблицаПолей, Истина);
 	ОбновитьТексты();
	
КонецПроцедуры

&НаКлиенте
Процедура СрезПоследних_СнятьФлажки(Команда)

	ИзменитьФлажки(Элементы.СрезПоследних_ТаблицаПолей, СрезПоследних_ТаблицаПолей, Ложь);
 	ОбновитьТексты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияТекстаЗапроса", ЭтаФорма);
	
	Конструктор = Новый КонструкторЗапроса(ТекстЗапроса);
	Конструктор.РежимКомпоновкиДанных = Истина;
	Конструктор.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияТекстаЗапроса(Текст, ДополнительныеПараметры) Экспорт
	
	Если Текст <> Неопределено Тогда
		ТекстЗапроса = Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФактическогоЗапроса(Команда)

	Конструктор = Новый("КонструкторЗапроса");
	Конструктор.Текст = ТекстФактическогоЗапроса;
	Конструктор.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстФактическогоЗапроса(Команда)
	
	ОбновитьТекстФактическогоЗапросаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискШаблоновКода(Команда)
	
	ОткрытьФорму("ВнешняяОбработка.Представления_ЗУП.Форма.ФормаШаблоныКода");
	
КонецПроцедуры

#КонецОбласти

#Область Периоды

&НаСервере
Процедура Периоды_Инициаизировать()
	
	Периоды_ИспользоватьКонецПериода = Ложь;
	Периоды_НачалоИнтервала = "ДатаНачала";
	Периоды_ОкончаниеИнтервала = "ДатаОкончания";
	Периоды_Периодичность = "ДЕНЬ";
	Периоды_ДобавитьВыборкуСотрудников = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция Периоды_ТекстЗапроса()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
	|ПОМЕСТИТЬ Представления_Периоды
	|ГДЕ
	|	""НачалоИнтервала"" = &[НачалоИнтервала]
	|	И ""ОкончаниеИнтервала"" = &[ОкончаниеИнтервала]
	|	И ""Периодичность"" = ""[Периодичность]""
	|	И ""ИспользоватьКонецПериода"" = ""[ИспользоватьКонецПериода]""";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НачалоИнтервала", Периоды_НачалоИнтервала);
	ПараметрыЗапроса.Вставить("ОкончаниеИнтервала", Периоды_ОкончаниеИнтервала);
	ПараметрыЗапроса.Вставить("Периодичность", Периоды_Периодичность);
	ПараметрыЗапроса.Вставить("ИспользоватьКонецПериода", БулевоСтрокой(Периоды_ИспользоватьКонецПериода));
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыЗапроса);
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаКлиенте
Функция Периоды_ТекстЗапросаВыборкиСотрудников()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	КОНЕЦПЕРИОДА(Представления_Периоды.Период, ДЕНЬ) КАК Период
	|ПОМЕСТИТЬ [ТаблицаДляПомещения]
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Представления_Периоды КАК Представления_Периоды
	|		ПО (ИСТИНА)
	|{ГДЕ
	|	Сотрудники.Ссылка.* КАК Сотрудник}";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТаблицаДляПомещения", КадровыеДанныеСотрудников_ИмяТаблицы);
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыЗапроса);
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаКлиенте
Функция Периоды_ШаблонКода()
						
	ШаблонКода = "ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, [НачалоИнтервала], [ОкончаниеИнтервала], ""[Периодичность]"", , , [ИспользоватьКонецПериода]);";
	
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("НачалоИнтервала", Периоды_НачалоИнтервала);
	ПараметрыШаблона.Вставить("ОкончаниеИнтервала", Периоды_ОкончаниеИнтервала);
	ПараметрыШаблона.Вставить("Периодичность", Периоды_Периодичность);
	ПараметрыШаблона.Вставить("ИспользоватьКонецПериода", БулевоСтрокой(Периоды_ИспользоватьКонецПериода));                
	
	ШаблонКода = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКода, ПараметрыШаблона);
	Возврат ШаблонКода;
	
КонецФункции

#КонецОбласти

#Область КадровыеДанныеСотрудников

&НаСервере
Процедура КадровыеДанныеСотрудников_Инициаизировать()
	
	ПоляПредставленийКадровыхДанных = КадровыйУчет.ПоляПредставленийКадровыхДанныхСотрудников();
	КадровыеДанныеСотрудников_ТаблицаПолей.Загрузить(ПоляПредставленийКадровыхДанных);
	Для каждого Строка Из КадровыеДанныеСотрудников_ТаблицаПолей Цикл
		Строка.ВРегИмяПоля = ВРег(Строка.ИмяПоля);
	КонецЦикла; 
	
	КадровыеДанныеСотрудников_ТолькоРазрешенные = Истина;
	КадровыеДанныеСотрудников_ФормироватьСПериодичностьДень = Истина;
	КадровыеДанныеСотрудников_ИмяТаблицы = "ВТСотрудники";
	КадровыеДанныеСотрудников_ТаблицаДляПомещения = "Представления_КадровыеДанныеСотрудников";
	
КонецПроцедуры

&НаКлиенте
Функция КадровыеДанныеСотрудников_ТекстЗапроса()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|[СтрокаРеквизитов]
	|ПОМЕСТИТЬ [ТаблицаДляПомещения]
	|ИЗ
	|	[ИмяТаблицы] КАК [ИмяТаблицы]
	|ГДЕ
	|	[СтрокаПараметров]";
	
	ПараметрыШаблона = КадровыеДанныеСотрудников_Параметры();
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыШаблона);
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаКлиенте
Функция КадровыеДанныеСотрудников_ШаблонКода()
	
	Шаблон = 
	"	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ""[ИмяТаблицы]"");
	|	Описатель.ИмяВТКадровыеДанныеСотрудников = ""[ТаблицаДляПомещения]""; //По умолчанию ВТКадровыеДанныеСотрудников
	|	
	|	КадровыеДанные = ""[СтрокаРеквизитов]"";
	|	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, [ТолькоРазрешенные], КадровыеДанные)";
	
	МассивСтрок = Новый Массив;
	Отбор = Новый Структура("Пометка", Истина);
	Для каждого Строка Из КадровыеДанныеСотрудников_ТаблицаПолей.НайтиСтроки(Отбор) Цикл
		МассивСтрок.Добавить(Строка.ИмяПоля);
	КонецЦикла;
	СтрокаРеквизитов = СтрСоединить(МассивСтрок, ", ");
	
	ПараметрыШаблона = КадровыеДанныеСотрудников_Параметры();
	
	Результат = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыШаблона);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КадровыеДанныеСотрудников_Параметры()
	
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ИмяТаблицы", КадровыеДанныеСотрудников_ИмяТаблицы);
	ПараметрыШаблона.Вставить("ТаблицаДляПомещения", КадровыеДанныеСотрудников_ТаблицаДляПомещения);
	ПараметрыШаблона.Вставить("СтрокаРеквизитов", СтрокаРеквизитов(КадровыеДанныеСотрудников_ТаблицаПолей));
	ПараметрыШаблона.Вставить("СтрокаПараметров", КадровыеДанныеСотрудников_СтрокаПараметров());
	ПараметрыШаблона.Вставить("ТолькоРазрешенные", БулевоСтрокой(КадровыеДанныеСотрудников_ТолькоРазрешенные));
	
	Возврат ПараметрыШаблона;
КонецФункции

&НаКлиенте
Функция КадровыеДанныеСотрудников_СтрокаПараметров()

	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ТолькоРазрешенные", БулевоСтрокой(КадровыеДанныеСотрудников_ТолькоРазрешенные));
	
	Если НЕ КадровыеДанныеСотрудников_ФормироватьСПериодичностьДень Тогда
		ЗначенияПараметров.Вставить("ФормироватьСПериодичностьДень", "ЛОЖЬ");
	КонецЕсли;
	
	СтрокаПараметров = СтрокаПараметров(ЗначенияПараметров);
	Возврат СтрокаПараметров;
	
КонецФункции

#КонецОбласти

#Область КадровыеДанныеФизическихЛиц

&НаСервере
Процедура КадровыеДанныеФизическихЛиц_Инициаизировать()
	
	ПоляПредставленийКадровыхДанных = КадровыйУчет.ПоляПредставленийКадровыхДанныхФизическихЛиц();
	КадровыеДанныеФизическихЛиц_ТаблицаПолей.Загрузить(ПоляПредставленийКадровыхДанных);
	Для каждого Строка Из КадровыеДанныеФизическихЛиц_ТаблицаПолей Цикл
		Строка.ВРегИмяПоля = ВРег(Строка.ИмяПоля);
	КонецЦикла; 
	
	КадровыеДанныеФизическихЛиц_ТолькоРазрешенные = Истина;
	КадровыеДанныеФизическихЛиц_ФормироватьСПериодичностьДень = Истина;
	КадровыеДанныеФизическихЛиц_ИмяТаблицы = "ВТФизичаскиеЛица";
	КадровыеДанныеФизическихЛиц_ТаблицаДляПомещения = "Представления_КадровыеДанныеФизическихЛиц";
	
КонецПроцедуры

&НаКлиенте
Функция КадровыеДанныеФизическихЛиц_ТекстЗапроса()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|[СтрокаРеквизитов]
	|ПОМЕСТИТЬ [ТаблицаДляПомещения]
	|ИЗ
	|	[ИмяТаблицы] КАК [ИмяТаблицы]
	|ГДЕ
	|	[СтрокаПараметров]";
	
	ПараметрыШаблона = КадровыеДанныеФизическихЛиц_Параметры();
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыШаблона);
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаКлиенте
Функция КадровыеДанныеФизическихЛиц_ШаблонКода()
	
	Шаблон = 
	"	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, ""[ИмяТаблицы]"");
	|	Описатель.ИмяВТКадровыеДанныеФизическихЛиц = ""[ТаблицаДляПомещения]""; //По умолчанию ВТКадровыеДанныеФизическихЛиц
	|	
	|	КадровыеДанные = ""[СтрокаРеквизитов]"";
	|	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(Описатель, [ТолькоРазрешенные], КадровыеДанные)";
	
	МассивСтрок = Новый Массив;
	Отбор = Новый Структура("Пометка", Истина);
	Для каждого Строка Из КадровыеДанныеФизическихЛиц_ТаблицаПолей.НайтиСтроки(Отбор) Цикл
		МассивСтрок.Добавить(Строка.ИмяПоля);
	КонецЦикла;
	СтрокаРеквизитов = СтрСоединить(МассивСтрок, ", ");
	
	ПараметрыШаблона = КадровыеДанныеФизическихЛиц_Параметры();
	
	Результат = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыШаблона);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КадровыеДанныеФизическихЛиц_Параметры()
	
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ИмяТаблицы", КадровыеДанныеФизическихЛиц_ИмяТаблицы);
	ПараметрыШаблона.Вставить("ТаблицаДляПомещения", КадровыеДанныеФизическихЛиц_ТаблицаДляПомещения);
	ПараметрыШаблона.Вставить("СтрокаРеквизитов", СтрокаРеквизитов(КадровыеДанныеФизическихЛиц_ТаблицаПолей));
	ПараметрыШаблона.Вставить("СтрокаПараметров", КадровыеДанныеФизическихЛиц_СтрокаПараметров());
	ПараметрыШаблона.Вставить("ТолькоРазрешенные", БулевоСтрокой(КадровыеДанныеФизическихЛиц_ТолькоРазрешенные));
	
	Возврат ПараметрыШаблона;
КонецФункции

&НаКлиенте
Функция КадровыеДанныеФизическихЛиц_СтрокаПараметров()

	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ТолькоРазрешенные", БулевоСтрокой(КадровыеДанныеФизическихЛиц_ТолькоРазрешенные));
	ЗначенияПараметров.Вставить("ФормироватьСПериодичностьДень", БулевоСтрокой(КадровыеДанныеФизическихЛиц_ФормироватьСПериодичностьДень));
	
	СтрокаПараметров = СтрокаПараметров(ЗначенияПараметров);
	Возврат СтрокаПараметров;
	
КонецФункции

#КонецОбласти

#Область ДанныеУчетаВремениИСостоянийСотрудников

&НаСервере
Процедура ДанныеУчетаВремениИСостоянийСотрудников_Инициаизировать()
	
	Обновить_ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей();
	
	ДанныеУчетаВремениИСостоянийСотрудников_ТолькоРазрешенные = Истина;
	ДанныеУчетаВремениИСостоянийСотрудников_МесяцДатаОкончания = "МесяцДатаОкончания";
	ДанныеУчетаВремениИСостоянийСотрудников_МесяцДатаНачала = "МесяцДатаНачала";
	ДанныеУчетаВремениИСостоянийСотрудников_ДатаОкончания = "ДатаОкончания";
	ДанныеУчетаВремениИСостоянийСотрудников_ДатаНачала = "ДатаНачала";
	ДанныеУчетаВремениИСостоянийСотрудников_ДатаАктуальности = "ДатаАктуальности";
	ДанныеУчетаВремениИСостоянийСотрудников_РассчитыватьПлановоеВремя = "РассчитыватьПлановоеВремя";
	
КонецПроцедуры

&НаСервере
Процедура Обновить_ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОписаниеПолей = ОбработкаОбъект.ОписаниеПолейПредставления_ДанныеУчетаВремениИСостоянийСотрудников();
	ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей.Загрузить(ОписаниеПолей);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеУчетаВремениИСостоянийСотрудников_ТекстЗапроса()
	
	Шаблон = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&[ДатаНачала] КАК ДатаНачала,
	|	&[ДатаОкончания] КАК ДатаОкончания,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|{ГДЕ
	|	Сотрудники.Ссылка.* КАК Сотрудник}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|[СтрокаРеквизитов]
	|ПОМЕСТИТЬ Представления_ДанныеУчетаВремениИСостоянийСотрудников
	|ИЗ
	|	ВТСотрудники КАК ВТСотрудники
	|ГДЕ
	|	""ТолькоРазрешенные"" = [ТолькоРазрешенные]
	|	И ""ДатаНачала"" = &[ДатаНачала]
	|	И ""ДатаОкончания"" = &[ДатаОкончания]
	|	И ""МесяцДатаНачала"" = &[МесяцДатаНачала]
	|	И ""МесяцДатаОкончания"" = &[МесяцДатаОкончания]
	|	И ""ДатаАктуальности"" = &[ДатаАктуальности]
	|	И ""РассчитыватьПлановоеВремя"" = &[РассчитыватьПлановоеВремя]";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТолькоРазрешенные", БулевоСтрокой(ДанныеУчетаВремениИСостоянийСотрудников_ТолькоРазрешенные));
	ПараметрыЗапроса.Вставить("ДатаНачала", ДанныеУчетаВремениИСостоянийСотрудников_ДатаНачала);
	ПараметрыЗапроса.Вставить("ДатаОкончания", ДанныеУчетаВремениИСостоянийСотрудников_ДатаОкончания);
	ПараметрыЗапроса.Вставить("МесяцДатаНачала", ДанныеУчетаВремениИСостоянийСотрудников_МесяцДатаНачала);
	ПараметрыЗапроса.Вставить("МесяцДатаОкончания", ДанныеУчетаВремениИСостоянийСотрудников_МесяцДатаОкончания);
	ПараметрыЗапроса.Вставить("ДатаАктуальности", ДанныеУчетаВремениИСостоянийСотрудников_ДатаАктуальности);
	ПараметрыЗапроса.Вставить("РассчитыватьПлановоеВремя", ДанныеУчетаВремениИСостоянийСотрудников_РассчитыватьПлановоеВремя);
	ПараметрыЗапроса.Вставить("СтрокаРеквизитов", СтрокаРеквизитов(ДанныеУчетаВремениИСостоянийСотрудников_ТаблицаПолей));
	
	Результат = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыЗапроса);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ШтатноеРасписание

&НаСервере
Процедура ШтатноеРасписание_Инициаизировать()
	
	Обновить_ШтатноеРасписание_ТаблицаПолей();
	
	ШтатноеРасписание_ТолькоРазрешенные = Истина;
	ШтатноеРасписание_ВключатьНачисления = Ложь;
	ШтатноеРасписание_ДатаАктуальности = "ДатаАктуальности";
	
КонецПроцедуры

&НаКлиенте
Процедура ШтатноеРасписание_ВключатьНачисленияПриИзменении(Элемент)
	
	Обновить_ШтатноеРасписание_ТаблицаПолей();
	ОбновитьТексты();
	
КонецПроцедуры

&НаСервере
Процедура Обновить_ШтатноеРасписание_ТаблицаПолей()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОписаниеПолей = ОбработкаОбъект.ОписаниеПолейПредставления_ШтатноеРасписание(ШтатноеРасписание_ВключатьНачисления);
	ШтатноеРасписание_ТаблицаПолей.Загрузить(ОписаниеПолей);
	
КонецПроцедуры

&НаКлиенте
Функция ШтатноеРасписание_ТекстЗапроса()
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ 
	|[СтрокаРеквизитов] 
	|ПОМЕСТИТЬ Представления_ШтатноеРасписание
	|ГДЕ
	|	""ТолькоРазрешенные"" = [ТолькоРазрешенные]
	|	И ""ДатаАктуальности"" = &[ДатаАктуальности]
	|	И ""ВключатьНачисления"" = [ВключатьНачисления]";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТолькоРазрешенные", БулевоСтрокой(ШтатноеРасписание_ТолькоРазрешенные));
	ПараметрыЗапроса.Вставить("ДатаАктуальности", БулевоСтрокой(ШтатноеРасписание_ДатаАктуальности));
	ПараметрыЗапроса.Вставить("ВключатьНачисления", БулевоСтрокой(ШтатноеРасписание_ВключатьНачисления));
	ПараметрыЗапроса.Вставить("СтрокаРеквизитов", СтрокаРеквизитов(ШтатноеРасписание_ТаблицаПолей));
	
	ТекстПодзапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыЗапроса);
	Возврат ТекстПодзапроса;
	
КонецФункции

#КонецОбласти

#Область СрезПоследних

&НаСервере
Процедура СрезПоследних_Инициаизировать()
	
	СрезПоследних_ТолькоРазрешенные = Истина;
	
	Для каждого Регистр Из Метаданные.РегистрыСведений Цикл
		Если Строка(Регистр.ПериодичностьРегистраСведений) = "Непериодический" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьОбщийМодуль(Регистр.Имя) 
			ИЛИ ЕстьРесурсДействуетДо(Регистр.Имя)
		Тогда
			Элементы.СрезПоследних_ИмяРегистра.СписокВыбора.Добавить(Регистр.Имя, , , БиблиотекаКартинок.ОформлениеВоcклицательныйЗнак);
		Иначе	
			Элементы.СрезПоследних_ИмяРегистра.СписокВыбора.Добавить(Регистр.Имя);
		КонецЕсли;	
	КонецЦикла;
	
	СрезПоследних_НастроитьЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры	
	
&НаКлиенте
Процедура СрезПоследних_ИмяРегистраПриИзменении(Элемент)
	
	Обновить_СрезПоследних_ТаблицаПолей();
	ОбновитьТексты();
	СрезПоследних_НастроитьЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура Обновить_СрезПоследних_ТаблицаПолей()
	
	Если ЗначениеЗаполнено(СрезПоследних_ИмяРегистра) Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОписаниеПолей = ОбработкаОбъект.ОписаниеПолейПредставления_СрезПоследних(СрезПоследних_ИмяРегистра);
		СрезПоследних_ТаблицаПолей.Загрузить(ОписаниеПолей);
	Иначе
		СрезПоследних_ТаблицаПолей.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция СрезПоследних_ТекстЗапроса()
	
	Шаблон = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|[СтрокаРеквизитов] 
	|ПОМЕСТИТЬ Представления_СрезПоследних_[ИмяРегистра]
	|ИЗ
	|	[ИмяТаблицы] КАК [ИмяТаблицы]
	|ГДЕ
	|	""ТолькоРазрешенные"" = [ТолькоРазрешенные]";

	ПараметрыШаблона = СрезПоследних_Параметры();
	Результат = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыШаблона);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СрезПоследних_ШаблонКода()
	
	Шаблон = 
	"	//Срез последних
	|	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	|	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра([ИмяТаблицы], ""[ИзмеренияФильтра]"");
	|
	|	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраСрезПоследних(
	|		""[ИмяРегистра]"", Запрос.МенеджерВременныхТаблиц, [ТолькоРазрешенные], ОписаниеФильтра, ПараметрыПостроения);
	|		
	|	//Интевалы (доступны только для регистров с регистратором.		
	|	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра([ИмяТаблицы], ""[ИзмеренияФильтра]"");
	|	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(""[ИмяРегистра]"", МенеджерВременныхТаблиц, [ТолькоРазрешенные], ОписаниеФильтра);";
	
	ПараметрыШаблона = СрезПоследних_Параметры();
	Результат = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыШаблона);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СрезПоследних_Параметры()
	
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ИмяРегистра", СрезПоследних_ИмяРегистра);
	ПараметрыШаблона.Вставить("ИмяТаблицы", СрезПоследних_ИмяТаблицы);
	ПараметрыШаблона.Вставить("СтрокаРеквизитов", СтрокаРеквизитов(СрезПоследних_ТаблицаПолей));
	ПараметрыШаблона.Вставить("ТолькоРазрешенные", БулевоСтрокой(СрезПоследних_ТолькоРазрешенные));
	
	Возврат ПараметрыШаблона;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СрезПоследних_НастроитьЭлементыФормы(Форма)
	
	Форма.Элементы.СрезПоследних_ИмяРегистра_Предупреждение_ЕстьМодуль.Видимость = ЕстьОбщийМодуль(Форма.СрезПоследних_ИмяРегистра);
	Форма.Элементы.СрезПоследних_ИмяРегистра_Предупреждение_ЕстьРесурсДействуетДо.Видимость = ЕстьРесурсДействуетДо(Форма.СрезПоследних_ИмяРегистра);
	Форма.Элементы.СрезПоследних_ИмяРегистра_Предупреждение_ЕстьФлагИспользовать.Видимость = СрезПоследних_ЕстьПолеИспользуется(Форма);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьОбщийМодуль(ИмяМодуля)
	
	Если ЗначениеЗаполнено(ИмяМодуля) Тогда
		Результат = (Метаданные.ОбщиеМодули.Найти(ИмяМодуля) <> Неопределено);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьРесурсДействуетДо(ИмяРегистра)
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		Результат = (Метаданные.РегистрыСведений[ИмяРегистра].Ресурсы.Найти("ДействуетДо") <> Неопределено);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СрезПоследних_ЕстьПолеИспользуется(Форма)
	
	Отбор = Новый Структура("ИмяПоля", "Используется");
	Строки = Форма.СрезПоследних_ТаблицаПолей.НайтиСтроки(Отбор);
	
	Возврат ЗначениеЗаполнено(Строки);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура Инициализировать()
	
	ТаблицаПредставления = МакетВТаблицуЗначений("Представления");
	Представления.Загрузить(ТаблицаПредставления);
	
	Периоды_Инициаизировать();
	КадровыеДанныеСотрудников_Инициаизировать();
	КадровыеДанныеФизическихЛиц_Инициаизировать();
	ДанныеУчетаВремениИСостоянийСотрудников_Инициаизировать();
	ШтатноеРасписание_Инициаизировать();
	СрезПоследних_Инициаизировать();
	
	НастроитьЭлементыФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастроитьЭлементыФормы(Форма)
	
	Отбор = Новый Структура("ИспользоватьДоступно", Истина);
	Для каждого Строка Из Форма.Представления.НайтиСтроки(Отбор) Цикл
		Форма.Элементы["Группа" + Строка.Имя].Видимость = Строка.Использовать;
	КонецЦикла; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользоватьВТ(Имя, Форма);
	
	Отбор = Новый Структура("Имя", Имя);
	Строка = Форма.Представления.НайтиСтроки(Отбор)[0];
	
	Возврат Строка.Использовать;

КонецФункции

&НаКлиенте
Процедура ИзменитьФлажки(ЭлементФормыТаблица, Таблица, Значение)
	
	ИдентификаторыСтрок = ЭлементФормыТаблица.ВыделенныеСтроки;
	Если ИдентификаторыСтрок.Количество() > 1 Тогда
		Строки = Новый Массив;
		Для каждого Идентификатор Из ИдентификаторыСтрок Цикл
			Строка = Таблица.НайтиПоИдентификатору(Идентификатор);
			Строки.Добавить(Строка);
		КонецЦикла;
	Иначе
		Строки = Таблица;
	КонецЕсли;
	
	Для каждого Строка Из Строки Цикл
		Строка.Пометка = Значение;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТексты()
	
	ОбновитьТекстыЗапросов();
	ОбновитьШаблоныКода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШаблоныКода()
	
	Тексты = Новый Массив;
	
	Если ИспользоватьВТ("Периоды", ЭтаФорма) Тогда
		ШаблонКода = Периоды_ШаблонКода();
		Тексты.Добавить(ШаблонКода);
	КонецЕсли; 
	
	Если ИспользоватьВТ("КадровыеДанныеСотрудников", ЭтаФорма) Тогда
		ШаблонКода = КадровыеДанныеСотрудников_ШаблонКода();
		Тексты.Добавить(ШаблонКода);
	КонецЕсли;

	Если ИспользоватьВТ("КадровыеДанныеФизическихЛиц", ЭтаФорма) Тогда
		ШаблонКода = КадровыеДанныеФизическихЛиц_ШаблонКода();
		Тексты.Добавить(ШаблонКода);
	КонецЕсли;

	Если ИспользоватьВТ("СрезПоследних", ЭтаФорма) Тогда
		ШаблонКода = СрезПоследних_ШаблонКода();
		Тексты.Добавить(ШаблонКода);
	КонецЕсли;
	
	Разделитель =
	"
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ШаблоныКода = СтрСоединить(Тексты, Разделитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстыЗапросов()
	
	Тексты = Новый Массив;
	
	Если ИспользоватьВТ("Периоды", ЭтаФорма) Тогда
		ТекстПодзапроса = Периоды_ТекстЗапроса();
		Тексты.Добавить(ТекстПодзапроса);
		
		Если Периоды_ДобавитьВыборкуСотрудников Тогда
			ТекстПодзапроса = Периоды_ТекстЗапросаВыборкиСотрудников();
			Тексты.Добавить(ТекстПодзапроса);
		КонецЕсли;	
	КонецЕсли;
	
	Если ИспользоватьВТ("КадровыеДанныеСотрудников", ЭтаФорма) Тогда
		ТекстПодзапроса = КадровыеДанныеСотрудников_ТекстЗапроса();
		Тексты.Добавить(ТекстПодзапроса);
	КонецЕсли;

	Если ИспользоватьВТ("КадровыеДанныеФизическихЛиц", ЭтаФорма) Тогда
		ТекстПодзапроса = КадровыеДанныеФизическихЛиц_ТекстЗапроса();
		Тексты.Добавить(ТекстПодзапроса);
	КонецЕсли;
	
	Если ИспользоватьВТ("ДанныеУчетаВремениИСостоянийСотрудников", ЭтаФорма) Тогда
		ТекстПодзапроса = ДанныеУчетаВремениИСостоянийСотрудников_ТекстЗапроса();
		Тексты.Добавить(ТекстПодзапроса);
	КонецЕсли;
	
	Если ИспользоватьВТ("ШтатноеРасписание", ЭтаФорма) Тогда
		ТекстПодзапроса = ШтатноеРасписание_ТекстЗапроса();
		Тексты.Добавить(ТекстПодзапроса);
	КонецЕсли;

	Если ИспользоватьВТ("СрезПоследних", ЭтаФорма) Тогда
		ТекстПодзапроса = СрезПоследних_ТекстЗапроса();
		Тексты.Добавить(ТекстПодзапроса);
	КонецЕсли;
	
	Разделитель =
	"
	|;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = СтрСоединить(Тексты, Разделитель);
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаРеквизитов(ТаблицаОписанияПолей)
	
	МассивСтрок = Новый Массив;
	
	ШаблонСтроки = "	%1 КАК %2";
	
	Отбор = Новый Структура("Пометка", Истина);
	Для каждого Строка Из ТаблицаОписанияПолей.НайтиСтроки(Отбор) Цикл
		СтрокаЗапроса = СтрШаблон(ШаблонСтроки, Строка.ПустоеЗначениеНаЯзыкеЗапросов, Строка.ИмяПоля);
		МассивСтрок.Добавить(СтрокаЗапроса);
	КонецЦикла;
	
	Разделитель = "," + Символы.ПС;
	Результат = СтрСоединить(МассивСтрок, Разделитель);
	
	Возврат Результат;
	
КонецФункции	
	
&НаКлиенте
Функция СтрокаПараметров(ЗначенияПараметров)
	
	МассивСтрок = Новый Массив;
	ШаблонСтроки = """%1"" = %2";
	
	Для каждого Элемент Из ЗначенияПараметров Цикл
		Строка = СтрШаблон(ШаблонСтроки, Элемент.Ключ, Элемент.Значение);	
		МассивСтрок.Добавить(Строка);
	КонецЦикла; 
	
	Разделитель = Символы.ПС + "	И ";
	Результат = СтрСоединить(МассивСтрок, Разделитель);
	
	Возврат Результат;
	
КонецФункции
	
&НаКлиенте
Функция БулевоСтрокой(Значение)
	
	Возврат Формат(Значение, "БЛ=ЛОЖЬ; БИ=ИСТИНА");

КонецФункции

&НаСервере
Процедура ОбновитьТекстФактическогоЗапросаНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекстФактическогоЗапроса = ОбработкаОбъект.ТекстФактическогоЗапроса(ТекстЗапроса);
	
КонецПроцедуры

&НаСервере
Функция МакетВТаблицуЗначений(ИмяМакета)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТабличныйДокумент = ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	
	ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
    ПостроительОтчета = Новый ПостроительОтчета;
    ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
    ПостроительОтчета.Выполнить();
	
	ТаблицаЗначений = ПостроительОтчета.Результат.Выгрузить();
    Возврат ТаблицаЗначений	
	
КонецФункции


#КонецОбласти

